name: Build/Upload Edge
on:
  push:
    branches:
      - 'edge'
      - 'edge-*'
jobs:
  buildtest:
    name: Test Build on ubuntu-latest with JDK 11
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: 11
    - name: Set up Ant
      run: sudo apt-get install ant
    - name: Build with Ant
      run: ant -noinput -buildfile build.xml test
  dockertest:
    name: Docker test on ubuntu-latest with JDK 11
    runs-on: ubuntu-latest
    needs: buildtest
    services:
      registry:
        image: registry:2
        ports:
          - 5000:5000
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v2
      with:
        platforms: linux/amd64
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
      with:
        version: latest
        driver-opts: network=host
    - name: Build Docker
      uses: docker/build-push-action@v3
      with:
        context: .
        file: ./Dockerfile
        platforms: linux/amd64
        push: true
        build-args: |
          PROJECT_VERSION=0.0.0
          ANT_ARGS=-Dbuildtype=test -Dversion=0.0.0
        tags: localhost:5000/tester/phantombot:test
    - name: Test with Docker
      run: docker run --rm --name phantombot localhost:5000/tester/phantombot:test launch-docker.sh --version
  build:
    name: Build and upload on ubuntu-latest with JDK 11
    runs-on: ubuntu-latest
    needs: [buildtest, dockertest]
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: 11
    - name: Set up Ant
      run: sudo apt-get install ant
    - name: Set up environment variables
      id: build_env
      run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF##*/})"
    - name: Prep Ant script
      env:
        BRANCH: ${{ steps.build_env.outputs.branch }}
      run: |
        sed -i -r 's/"version" value="[0-9.]+"/"version" value="'$BRANCH'"/' build.xml
        echo $?
        sed -i -r 's/revision="[A-Za-z0-9._-]+"/revision="'$BRANCH'"/;s/branch="[A-Za-z0-9._-]+"/branch="'$BRANCH'"/' ivy.xml
        echo $?
    - name: Build with Ant
      env:
        BUILDTYPE: ${{ format('{0}_build', steps.build_env.outputs.branch) }}
        ROLLBAR_TOKEN: ${{ secrets.ROLLBAR_TOKEN }}
        ROLLBAR_ENDPOINT: ${{ secrets.ROLLBAR_ENDPOINT }}
      run: ant -noinput -Dbuildtype=$BUILDTYPE -Drollbar_token=$ROLLBAR_TOKEN -Drollbar_endpoint=$ROLLBAR_ENDPOINT -buildfile build.xml dist
    - name: Prep Artifacts
      env:
        FOLDERFULL: ${{ format('PhantomBot-{0}', steps.build_env.outputs.branch) }}
        FOLDERLIN: ${{ format('PhantomBot-{0}-lin', steps.build_env.outputs.branch) }}
        FOLDERWIN: ${{ format('PhantomBot-{0}-win', steps.build_env.outputs.branch) }}
        FOLDERMAC: ${{ format('PhantomBot-{0}-mac', steps.build_env.outputs.branch) }}
        FOLDERARMBSDOTHER: ${{ format('PhantomBot-{0}-arm-bsd-other', steps.build_env.outputs.version) }}
      run: |
        mkdir dist/$FOLDERLIN
        rsync -rav --progress dist/$FOLDERFULL dist/$FOLDERLIN --exclude java-runtime --exclude java-runtime-macos --exclude launch.bat --exclude launch-bsd.sh --exclude launch-bsd-service.sh --exclude launch-docker.sh
        mkdir dist/$FOLDERWIN
        rsync -rav --progress dist/$FOLDERFULL dist/$FOLDERWIN --exclude java-runtime-linux --exclude java-runtime-macos --exclude launch.sh --exclude launch-service.sh --exclude launch-bsd.sh --exclude launch-bsd-service.sh --exclude launch-docker.sh
        mkdir dist/$FOLDERMAC
        rsync -rav --progress dist/$FOLDERFULL dist/$FOLDERMAC --exclude java-runtime-linux --exclude java-runtime --exclude launch.bat --exclude launch-bsd.sh --exclude launch-bsd-service.sh --exclude launch-docker.sh
        mkdir dist/$FOLDERARMBSDOTHER
        rsync -rav --progress dist/$FOLDERFULL dist/$FOLDERARMBSDOTHER --exclude java-runtime-linux --exclude java-runtime --exclude java-runtime-macos --exclude launch.bat --exclude launch-docker.sh
    - name: Upload Artifact (Full)
      uses: actions/upload-artifact@v3
      with:
        name: ${{ format('PhantomBot-{0}', steps.build_env.outputs.branch) }}
        path: ${{ format('dist/PhantomBot-{0}', steps.build_env.outputs.branch) }}
    - name: Upload Artifact (Linux)
      uses: actions/upload-artifact@v3
      with:
        name: ${{ format('PhantomBot-{0}-lin', steps.build_env.outputs.branch) }}
        path: ${{ format('dist/PhantomBot-{0}-lin', steps.build_env.outputs.branch) }}
    - name: Upload Artifact (Windows)
      uses: actions/upload-artifact@v3
      with:
        name: ${{ format('PhantomBot-{0}-win', steps.build_env.outputs.branch) }}
        path: ${{ format('dist/PhantomBot-{0}-win', steps.build_env.outputs.branch) }}
    - name: Upload Artifact (macOS)
      uses: actions/upload-artifact@v3
      with:
        name: ${{ format('PhantomBot-{0}-mac', steps.build_env.outputs.branch) }}
        path: ${{ format('dist/PhantomBot-{0}-mac', steps.build_env.outputs.branch) }}
    - name: Upload Artifact (ARM)
      uses: actions/upload-artifact@v3
      with:
        name: ${{ format('PhantomBot-{0}-arm-bsd-other', steps.build_env.outputs.branch) }}
        path: ${{ format('dist/PhantomBot-{0}-arm-bsd-other', steps.build_env.outputs.branch) }}
